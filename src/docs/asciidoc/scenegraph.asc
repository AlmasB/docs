= Scene Graph
Author: Almas Baimagambetov (https://almasb.github.io/[Webpage])

== Overview

A scene graph is a tree data structure that arranges (and groups) graphical objects for easier logical representation.
It also allows the graphics engine to render the objects in the most efficient way by
fully or partially skipping objects which will not be seen in the final image.
The following figure shows an example of the JavaFX scene graph architecture.

image::images/scenegraph/scene_graph.jpg[title="JavaFX Scene Graph"]

At the very top of the architecture there is a `Stage`.
A stage is a JavaFX representation of a native OS window.
At any given time a stage can have a single `Scene` attached to it.
A scene is a container for the JavaFX scene graph.

All elements in the JavaFX scene graph are represented as `Node`s.
There are three types of nodes: root, branch and leaf.
The root node is the only node that does not have a parent
and is directly contained by a scene, which can be seen in the figure above.
The difference between a branch and a leaf is that a leaf node does not have children.

In the scene graph, many properties of a parent node are shared by children nodes.
For instance, a transformation or an event applied to a parent node will also be applied recursively to its children.
As such, a complex hierarchy of nodes can be viewed as a single node to simplify the programming model.
We will explore transformations and events in later sections.

An example of a "Hello World" scene graph can be seen in the figure below.

image::images/scenegraph/specific_scene_graph.jpg[title="Hello World Scene Graph"]

One possible implementation that will produce a scene graph matching the figure above
is as follows.

[source,java]
.HelloApp.class
----
public class HelloApp extends Application {

    private Parent createContent() {
        return new StackPane(new Text("Hello World"));
    }

    @Override
    public void start(Stage stage) throws Exception {
        stage.setScene(new Scene(createContent(), 300, 300));
        stage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}
----

The result of running the code is seen in the next figure.

image::images/scenegraph/hello_world.jpg[title="Hello World"]

Important notes:

* A node can have the maximum of 1 parent.
* A node in the "active" (attached to a currently visible scene) scene graph can only be modified from the JavaFX Application Thread.

== Transformations

We will use the following app as an example to demonstrate the 3 most common transformations.

[source,java]
.TransformApp.class
----
public class TransformApp extends Application {

    private Parent createContent() {
        Rectangle box = new Rectangle(100, 50, Color.BLUE);

        transform(box);

        return new Pane(box);
    }

    private void transform(Rectangle box) {
        // we will apply transformations here
    }

    @Override
    public void start(Stage stage) throws Exception {
        stage.setScene(new Scene(createContent(), 300, 300, Color.GRAY));
        stage.show();
    }

    public static void main(String[] args) {
        launch(args);
    }
}
----

Running the application will result in the following image.

image::images/scenegraph/transform_base.jpg[title="Blue Box"]

In JavaFX, a simple transformation can happen in one of the 3 axes: X, Y or Z.
The example application is in 2D, so we will only consider X and Y axes.

=== Translate

In JavaFX and computer graphics, `translate` means move.
We can translate our box by 100 pixels in X axis and 200 pixels in Y axis.

[source,java]
----
private void transform(Rectangle box) {
    box.setTranslateX(100);
    box.setTranslateY(200);
}
----

image::images/scenegraph/transform_translate.jpg[title="Translate"]

=== Scale

You can apply scaling to make a node larger or smaller.
Scaling value is a ratio.
By default, a node has a scaling value of 1 (100%) in each axis.
We can enlarge our box by applying scaling of 1.5 in X and Y axes.

[source,java]
----
private void transform(Rectangle box) {
    // previous code
    
    box.setScaleX(1.5);
    box.setScaleY(1.5);
}
----

image::images/scenegraph/transform_scale.jpg[title="Scale"]

=== Rotate

A node's rotation determines the angle at which the node is rendered.
In 2D the only sensible rotation axis is the Z axis.
Let's rotate the box by 30 degrees.

[source,java]
----
private void transform(Rectangle box) {
    // previous code
    
    box.setRotate(30);
}
----

image::images/scenegraph/transform_rotate.jpg[title="Rotate"]

== Event Handling

Placeholder whilst things get built...